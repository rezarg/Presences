var __webpack_exports__ = {};
const presence = new Presence({ clientId: "991160367629750372" }), browsingTimestamp = Math.floor(Date.now() / 1000);
presence.on("UpdateData", async () => {
    const presenceData = {
        largeImageKey: "iconbig",
        startTimestamp: browsingTimestamp,
    }, { pathname, hostname } = document.location;
    if (hostname === "flowlab.io") {
        switch (pathname) {
            case "/": {
                presenceData.details = "Home Page";
                break;
            }
            case "/games": {
                if (document.location.search.includes("?q=")) {
                    presenceData.details = "Searching Games: " + "\"" + document.location.search.split("?q=")[1].replaceAll("+", " ") + "\"";
                }
                else {
                    presenceData.details = "Browsing Games";
                }
                break;
            }
            case "/game/browse": {
                presenceData.details = "Viewing games page";
                break;
            }
            case "/resources": {
                presenceData.details = "Browsing Resources";
                break;
            }
            case "/video_tutorials": {
                presenceData.details = "Browsing Video Tutorials";
                break;
            }
            case "/exploring_flowlab": {
                presenceData.details = "Browsing Examples";
                break;
            }
            case "/user_guide/": {
                presenceData.details = "Browsing the User Guide";
                break;
            }
            case "/examples": {
                presenceData.details = "Browsing Examples";
                break;
            }
            case "/behavior_handbook/": {
                presenceData.details = "Browsing the Behavior Handbook";
                break;
            }
            case "/exporting": {
                presenceData.details = "Browsing Exporting Help";
                break;
            }
            case "/multiplayer_handbook/": {
                presenceData.details = "Browsing the Multiplayer Handbook";
                break;
            }
            case "/pricing": {
                presenceData.details = "Browsing Upgrade Options";
                break;
            }
            case "/education/teachers": {
                presenceData.details = "Browsing Education Options";
                break;
            }
            case "/lab/blog/": {
                presenceData.details = "Browsing Blog Posts";
                break;
            }
            case "/games/mine": {
                presenceData.details = "Browsing Their Games";
                break;
            }
        }
        if (pathname.includes("_export")) {
            presenceData.details = "Browsing Exporting Help for " + pathname.split("_export")[0].replaceAll("/", "");
        }
        else if (pathname.includes("/assets/docs/")) {
            presenceData.details = "Browsing Documentation: \"" + pathname.split("/assets/docs/")[1] + "\"";
        }
        else if (pathname.includes("/lab/blog/") && pathname.split("/lab/blog/")[1]) {
            presenceData.details = "Browsing Blog Post: \"" + document.querySelectorAll(".display-2").item(0).textContent.trim() + "\"";
        }
        else if (pathname.includes("/games/play/") || pathname.includes("/game/play/")) {
            presenceData.details = "Playing \"" + document.querySelectorAll("#game_title").item(0).textContent.trim() + "\"";
            presenceData.state = "By: " + document.querySelectorAll("#game_author a").item(0).textContent.trim();
            presenceData.buttons = [
                {
                    label: "Play Game",
                    url: "https://flowlab.io/games/play/" + pathname.split("/")[pathname.split("/").length - 1]
                },
                {
                    label: "Creator Profile",
                    url: "https://flowlab.io" + document.querySelectorAll("#game_author a").item(0).getAttribute("href")
                }
            ];
        }
        else if (pathname.includes("/games/edit/") || pathname.includes("/game/edit/") || pathname.includes("/game/view/")) {
            presenceData.details = "Editing \"" + document.querySelectorAll("#game_title").item(0).textContent.trim() + "\"";
            presenceData.state = "By: " + document.querySelectorAll("#game_author a").item(0).textContent.trim();
        }
        else if (pathname.includes("/dev_teams/view/")) {
            presenceData.details = "Viewing Team: \"" + document.getElementsByClassName("mb-0 fs-3 fw-normal text-white text-truncate").item(0).textContent.trim() + "\"";
        }
        else if (pathname.includes("/users/profile/") && pathname.split("/users/profile/")[1]) {
            presenceData.details = "Viewing " + document.getElementsByClassName("mb-0 fs-3 fw-normal text-white text-truncate").item(0).textContent.trim() + "'s Profile";
        }
    }
    else if (hostname === "community.flowlab.io") {
        presenceData.details = "Browsing the Community Forums";
        switch (pathname) {
            case "/": {
                presenceData.state = "Home Page";
                break;
            }
            case "/categories": {
                presenceData.state = "Browsing Categories";
                break;
            }
            case "/latest": {
                presenceData.state = "Browsing Latest Posts";
                break;
            }
            case "/top": {
                presenceData.state = "Browsing Top Posts";
                break;
            }
            case "/about": {
                presenceData.state = "Reading the About";
                break;
            }
            case "/faq": {
                presenceData.state = "Reading the FAQ";
                break;
            }
            case "/tos": {
                presenceData.state = "Reading the Terms of Service";
                break;
            }
            case "/privacy": {
                presenceData.state = "Reading the Privacy Policy";
                break;
            }
            case "/search": {
                presenceData.state = "Searching for \"" + document.location.search.split("?q=")[1].replaceAll("+", " ") + "\"";
                break;
            }
        }
        if (pathname.includes("/u/")) {
            presenceData.state = "Viewing " + document.getElementsByClassName("username").item(0).textContent.trim() + "'s Profile";
            presenceData.buttons = [
                {
                    label: "View Profile",
                    url: "https://community.flowlab.io/u/" + pathname.split("/u/")[1]
                }
            ];
        }
        else if (pathname.includes("/t/")) {
            presenceData.details = "Reading \"" + document.getElementsByClassName("fancy-title").item(0)?.textContent?.trim() + "\"";
            presenceData.state = "By " + document.getElementsByClassName("first username").item(0).textContent.trim();
            presenceData.buttons = [
                {
                    label: "View Post",
                    url: document.URL
                }
            ];
        }
    }
    if (presenceData.details)
        presence.setActivity(presenceData);
    else
        presence.setActivity();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9wcmVzZW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQ2hFLGlCQUFpQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBRW5ELFFBQVEsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ3BDLE1BQU0sWUFBWSxHQUFpQjtRQUNqQyxhQUFhLEVBQ1osU0FBUztRQUNWLGNBQWMsRUFBRSxpQkFBaUI7S0FDakMsRUFDRCxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDO0lBRTVDLElBQUksUUFBUSxLQUFLLFlBQVksRUFBRTtRQUM5QixRQUFRLFFBQVEsRUFBRTtZQUNqQixLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUNULFlBQVksQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDO2dCQUNuQyxNQUFNO2FBQ047WUFDRCxLQUFLLFFBQVEsQ0FBQyxDQUFDO2dCQUNkLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUM3QyxZQUFZLENBQUMsT0FBTyxHQUFHLG1CQUFtQixHQUFHLElBQUksR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7aUJBQ3pIO3FCQUFNO29CQUNOLFlBQVksQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUM7aUJBQ3hDO2dCQUNELE1BQU07YUFDTjtZQUNELEtBQUssY0FBYyxD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

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
